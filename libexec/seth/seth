#!/usr/bin/env bash
### seth -- command-line Ethereum RPC client
### Usage: seth [<options>] <command> [<args>]
###    or: seth <command> --help
###
### Perform Ethereum RPC calls from the comfort of your command line.
###
### Connection options:
###
###    --rpc-host=<host>          JSON-RPC host (default: `localhost')
###    --rpc-port=<port>          JSON-RPC port (default: `8545')
###    --rpc-url=<url>            JSON-RPC URL (overrides host and port)
###
### Transaction options:
###
###    -F, --from=<sender>        account to send transaction from
###    -G, --gas=<number>         number of gas units to provide
###    -P, --gas-price=<number>   price (in wei) of each gas unit
###    -N, --nonce=<number>       nonce value to use for the transaction
###    -V, --value=<number>       amount (in wei) of ETH to send
###
### Options for seth-call(1):
###
###    -B, --block=<number>       block number (default: `latest')
###
### Options for seth-send(1):
###
###    --create                   use the calldata to create a new object
###    --guess                    guess the return value of the call
###    --status                   exit failure on failed tx (Byzantium)
###    --resend                   force current nonce to overwrite tx
###
### Other options:
###
###    --async                    do not wait for transaction receipt
###    --follow                   go into a loop watching for new logs
###    --json                     print output as JSON (if applicable)

OPTS="seth [<options>] <command> [<args>]
seth <command> --help
--
  Connection options:
rpc-host=host        JSON-RPC host (default: \`localhost')
rpc-port=port        JSON-RPC port (default: \`8545')
rpc-url=url          JSON-RPC URL (overrides host and port)

  Transaction options:
F,from=address       account to send transaction from
G,gas=number         number of gas units to provide
P,gas-price=number   price (in wei) of each gas unit
N,nonce=number       nonce value to use for the transaction
V,value=number       amount (in wei) of ETH to send

  Options for seth-call(1):
B,block=number       block number (default: \`latest')

  Options for seth-send(1):
create               use the calldata to create a new object
guess                guess the return value of the call
status               exit failure on failed tx (Byzantium)
resend               force current nonce to overwrite tx

  Other options:
async                do not wait for transaction receipt
follow               go into a loop watching for new logs
j,json               print output as JSON (if applicable)
"

set -e

if ! [[ $SETH_INIT ]]; then
  export SETH_INIT=1
  [[ -e ~/.sethrc ]] && . ~/.sethrc
  [[ $(pwd) != ~ && -e .sethrc ]] && . .sethrc
fi

if [[ $2 = --help ]]; then
  exec "${0##*/}" help -- "$1"
elif [[ $1 = -* ]] && which "${0##*/}-$1" &>/dev/null; then
  exec "${0##*/}-$1" "${@:2}"
fi

eval "$(git rev-parse --parseopt -- "$@" <<<"$OPTS" || echo exit $?)"

while [[ $1 ]]; do
  case $1 in
    --)              shift; break;;

    --rpc-host)      shift; export ETH_RPC_HOST=$1;;
    --rpc-port)      shift; export ETH_RPC_PORT=$1;;
    --rpc-url)       shift; export ETH_RPC_URL=$1;;

    -B|--block)      shift; export ETH_BLOCK=$1;;
    -F|--from)       shift; export ETH_FROM=$1;;
    -G|--gas)        shift; export ETH_GAS=$1;;
    -P|--gas-price)  shift; export ETH_GAS_PRICE=$1;;
    -N|--nonce)      shift; export ETH_NONCE=$1;;
    -V|--value)      shift; export ETH_VALUE=$1;;

       --create)            export SETH_CREATE=yes;;
       --guess)             export SETH_GUESS=yes;;
       --status)            export SETH_STATUS=yes;;
       --resend)            export SETH_RESEND=yes;;

       --async)             export SETH_ASYNC=yes;;
       --follow)            export SETH_FOLLOW=yes;;
    -j|--json)              export SETH_JSON=yes;;

    *) printf "${0##*/}: internal error: %q\n" "$1"; exit 1
  esac; shift
done

"${0##*/}-${1-help}" "${@:2}"
